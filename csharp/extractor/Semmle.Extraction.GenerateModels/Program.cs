using System;
using Semmle.Extraction.Reflector;
using Semmle.Extraction.CSharp.Reflector;
using System.IO;

namespace Semmle.Extraction.GenerateModels
{

    class Program
    {
        static void PatchFile(string filename, Action<TextWriter> writer, string startMarker, string endMarker)
        {
            var tmpOut = Path.GetTempFileName();

            using (var outFile = File.CreateText(tmpOut))
            {
                if (File.Exists(filename))
                {

                    using (var inFile = File.OpenText(filename))
                    {
                        outFile.NewLine = "\n";

                        string line;
                        while ((line = inFile.ReadLine()) != null && line != startMarker)
                        {
                            outFile.WriteLine(line);
                        }

                        outFile.WriteLine(startMarker);

                        if (line == null)
                        {
                            // No marker found -- append
                            writer(outFile);
                            outFile.WriteLine(endMarker);
                        }
                        else
                        {
                            // Marker
                            writer(outFile);
                            outFile.WriteLine(endMarker);

                            // Carry on reading until we reach the end marker
                            while ((line = inFile.ReadLine()) != null && line != endMarker)
                            {
                            }

                            // Append the tail
                            while ((line = inFile.ReadLine()) != null)
                            {
                                outFile.WriteLine(line);
                            }
                        }
                    }
                }
                else
                {
                    outFile.WriteLine(startMarker);
                    writer(outFile);
                    outFile.WriteLine(endMarker);
                }
            }
            File.Copy(tmpOut, filename, true);
            File.Delete(tmpOut);
        }


        static void Main(string[] args)
        {
            Console.WriteLine($"CWD = {System.IO.Directory.GetCurrentDirectory()}");

            var reflector = new Configuration(@"C:\odasa\tools\csharp");
            var model = new Model(reflector);

            PatchFile("dbscheme.txt", model.GenerateDbScheme, "// Start of autogenerated code -- do not edit", "// End of autogenerated code -- do not edit");

            using (var cs = File.CreateText("models.cs"))
            {
                model.GenerateCSharp(cs);
            }

            using(var ql = File.CreateText("roslyn.qll"))
            {
                model.GenerateQL(ql);
            }
        }
    }
}
